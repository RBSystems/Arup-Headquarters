/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:BBI Engineering
System Name:Bohemian Jinks Theatre
System Number:
Programmer:Sasha Harris-Cronin
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME "Simple Timer"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   "waitTime" is the time to wait
   "start" triggers the timer
   "cancel" cancels it so it can be triggered again
   "timer_active" is high when it is running
   "timer_expired" is a pulse with the timer runs out
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT start, cancel; 
ANALOG_INPUT waitTime;
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT timerActive, timerExpired;
// ANALOG_OUTPUT 
// STRING_OUTPUT 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
VOLATILE INTEGER timerRunning;
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH start
{
    if (timerRunning = 0)
    {
    	timerRunning = 1;
    	timerActive = 1;
    	
    	wait ((waitTime*100), timerWait)
    	{
    		PULSE (50, timerExpired);
    		timerRunning = 0;
    		timerActive = 0;
    	}
    }
}

PUSH cancel
{
	if (timerRunning = 1)
	{
		timerRunning = 0;
		timerActive = 0;
		cancelWait (timerWait);
	}
} 


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/


Function Main()
{
timerRunning = 0;
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


