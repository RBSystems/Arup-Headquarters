/******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: BBI Engineering
System Name: ARUP
System Number:
Programmer: Sasha Harris-Cronin
Comments: To save and recall multiple strings
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "9" // Memory
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
#DIGITAL_EXPAND Separately
// #ANALOG_SERIAL_EXPAND
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT store, recall, recall_all, whichStringToStore[20];
// ANALOG_INPUT 
STRING_INPUT stringInput[200];
// BUFFER_INPUT 

// DIGITAL_OUTPUT
// ANALOG_OUTPUT 
STRING_OUTPUT stringOutput[20];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER inputState[19];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING storedStrings[19][200], stringToStore[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function initializeStrings()
{
    integer i;
    
    for (i = 0 to 19)
    {
    	if (storedStrings[i] = "") storedStrings[i] = "" + ITOA(i);
    }
}


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH store
{
    integer i;
    
    for (i = 1 to getNumArrayCols(whichStringToStore))
    {
    	if (inputState[i] = 1) storedStrings[i -1] = stringToStore;
    }
}

PUSH recall
{
    integer i;
    
    for (i = 1 to getNumArrayCols(whichStringToStore))
    {
    	if (inputState[i] = 1) stringOutput[i] = storedStrings[i - 1];
    }
}
 
 
PUSH recall_all
{
	integer i; 
    
    for (i = 1 to getNumArrayCols(whichStringToStore))
    {
    	stringOutput[i] = storedStrings[i - 1];
    }
}
    
PUSH whichStringToStore
{
	integer whichInput;
	
	whichInput = getLastModifiedArrayIndex();
	inputState[whichInput] = 1; 
    
}
    


RELEASE whichStringToStore
{
	integer whichInput;
	
	whichInput = getLastModifiedArrayIndex();
	inputState[whichInput] = 0; 
}



CHANGE stringInput
{
    stringToStore = stringInput;
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{

	initializeStrings();

}


