/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Conference Phone Book"
// #HINT ""
#DEFINE_CONSTANT MAX_ENTRIES	25
#DEFINE_CONSTANT MAX_NUMBER_LEN	20
#DEFINE_CONSTANT MAX_DSC_LEN	40
#DEFINE_CONSTANT WINDOW_SIZE	5
// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT DialSelected;
DIGITAL_INPUT DeleteSelected;
DIGITAL_INPUT SaveToSelected;
DIGITAL_INPUT ScrollUp;
DIGITAL_INPUT ScrollDown;
DIGITAL_INPUT ClearAll;
DIGITAL_INPUT EntrySelect[WINDOW_SIZE];
// ANALOG_INPUT 
STRING_INPUT NewNumber$[MAX_NUMBER_LEN];
STRING_INPUT NewDescription$[MAX_DSC_LEN];
// BUFFER_INPUT 
 
DIGITAL_OUTPUT DialSelectedFB;
DIGITAL_OUTPUT Selected[WINDOW_SIZE];
STRING_OUTPUT SelectedNumber$;
STRING_OUTPUT NumberToDial$;
// ANALOG_OUTPUT 
STRING_OUTPUT Description$[WINDOW_SIZE];

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

INTEGER currentEntry;
INTEGER windowTop;
INTEGER SelectedPos;
NONVOLATILE STRING phoneNumber[MAX_ENTRIES][MAX_NUMBER_LEN];
NONVOLATILE STRING phoneDSC[MAX_ENTRIES][MAX_DSC_LEN];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function UpdateOutputs()
{
	INTEGER I;
	INTEGER J;

	SetArray(Selected, 0);
	Selected[selectedPos+1] = 1;
	for (I = 1 to WINDOW_SIZE)
	{
		J = windowTop + I;
		MakeString(Description$[I], "%d. %s", J, phoneDSC[J - 1]);
	}
	SelectedNumber$ = phoneNumber[currentEntry];
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH ClearAll
{
	SetArray(phoneNumber, "");
	SetArray(phoneDSC, "");
	CALL UpdateOutputs();
}
 
PUSH DeleteSelected
{
	phoneNumber[currentEntry] = "";
	phoneDSC[currentEntry] = "";
	MakeString(Description$[selectedPos+1], "%d. ", currentEntry+1);
	SelectedNumber$ = "";	
}
     
PUSH SaveToSelected
{
	phoneNumber[currentEntry] = NewNumber$;
	phoneDSC[currentEntry] = NewDescription$;
	MakeString(Description$[selectedPos+1], "%d. %s", currentEntry+1, NewDescription$);
	SelectedNumber$ = NewNumber$;
}
         
PUSH ScrollDown
{
	IF (windowTop < (MAX_ENTRIES - WINDOW_SIZE))
	{
		windowTop = windowTop + WINDOW_SIZE;
		currentEntry = currentEntry + WINDOW_SIZE;
		ProcessLogic();
		CALL UpdateOutputs();
	}	
}

PUSH ScrollUp
{
	IF (windowTop >= WINDOW_SIZE)
	{
		windowTop = windowTop - WINDOW_SIZE;
		currentEntry = currentEntry - WINDOW_SIZE;
		ProcessLogic();
		CALL UpdateOutputs();
	}
}
      
PUSH DialSelected
{
	NumberToDial$ = phoneNumber[currentEntry];
	Pulse(50, DialSelectedFB);
}

PUSH EntrySelect
{
	selectedPos = GetLastModifiedArrayIndex() - 1;
	SetArray(Selected, 0);
	Selected[selectedPos+1] = 1;
    currentEntry = windowTop + selectedPos;
	SelectedNumber$ = phoneNumber[currentEntry];
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	currentEntry = 0;
	selectedPos = 0;
	DialSelectedFB = 0;
	windowTop = 0;
	NumberToDial$ = "";
	CALL UpdateOutputs();
}


